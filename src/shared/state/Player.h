// Generated by dia2code
#ifndef STATE__PLAYER__H
#define STATE__PLAYER__H

#include <string>
#include <vector>
#include <memory>

namespace state {
  class CreaturesGroup;
}

#include "CreaturesGroup.h"
#include "CreaturesID.h"

namespace state {

  /// class Player - 
  class Player {
    // Associations
    state::CreaturesID clanName;
    // Attributes
  private:
    int cellNbr;
    int zonesNbr;
    int conquestPoints;
    std::vector<std::string> speCellsNames;
    int xLastCell     = 0;
    int yLastCell     = 0;
    std::vector<std::shared_ptr<CreaturesGroup> > allCreatures;
    int creaturesLeft;
  protected:
    bool isStriker;
    // Operations
  public:
    Player ();
    ~Player ();
    int getCellsNbr () const;
    int getZonesNbr () const;
    int getConquestPoints () const;
    int getCreaturesLeft () const;
    const std::vector<std::string>& getSpeCellsNames () const;
    int getXLastCell () const;
    int getYLastCell () const;
    const std::vector<std::shared_ptr<CreaturesGroup> >& getAllCreatures () const;
    const std::shared_ptr<CreaturesGroup>& getOneCreatures (int number) const;
    void setCellsNbr (int count);
    void setZonesNbr (int count);
    void setConquestPts (int count);
    void setCreaLeft (int count);
    void decreaseCreaLeft ();
    void modifySpeCellsNames (std::string name, bool add);
    void setXLastCell (int x);
    void setYLastCell (int y);
    void setAllCreatures (std::vector<std::shared_ptr<CreaturesGroup> > creaList);
    void setAllCreatures (bool add, std::shared_ptr<CreaturesGroup> group);
    // Setters and Getters
    CreaturesID getClanName() const;
    void setClanName(CreaturesID clanName);
    bool getIsStriker() const;
    void setIsStriker(bool isStriker);
  };

};

#endif
