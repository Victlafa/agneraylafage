// Generated by dia2code
#ifndef ENGINE__MOVEACTION__H
#define ENGINE__MOVEACTION__H

#include <vector>
#include <memory>

namespace engine {
  class Fight;
};
namespace state {
  class State;
};
namespace engine {
  class Action;
}

#include "Fight.h"
#include "Action.h"

namespace engine {

  /// class MoveAction - 
  class MoveAction : public engine::Action {
    // Associations
    // Attributes
  private:
    bool isThereFight;
    std::vector<int> initCreaturesNbr;
  protected:
    std::shared_ptr<Fight> fight;
    std::vector<int> initPos;
    std::vector<int> finalPos;
    int player;
    // Operations
  public:
    MoveAction ();
    MoveAction (int init_i, int init_j, int final_i, int final_j, int player);
    bool getIsThereFight ();
    std::vector<int>& getInitCreaturesNbr () const;
    void apply (state::State& state);
    void undo (state::State& etat);
    // Setters and Getters
    const std::shared_ptr<Fight>& getFight() const;
    void setFight(const std::shared_ptr<Fight>& fight);
    const std::vector<int>& getInitPos() const;
    void setInitPos(const std::vector<int>& initPos);
    const std::vector<int>& getFinalPos() const;
    void setFinalPos(const std::vector<int>& finalPos);
    int getPlayer() const;
    void setPlayer(int player);
  };

};

#endif
