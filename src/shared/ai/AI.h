// Generated by dia2code
#ifndef AI__AI__H
#define AI__AI__H

#include <vector>
#include <memory>

namespace engine {
  class Engine;
  class Command;
}

#include "engine/Engine.h"
#include "engine/Command.h"

namespace ai {

  /// class AI - 
  class AI {
    // Attributes
  private:
    engine::Engine* moteur;
  protected:
    std::vector<std::shared_ptr<engine::Command> > listCommands;
    // Operations
  public:
    AI (engine::Engine* moteur);
    virtual void run (int player) = 0;
    void initIA (int player);
    virtual std::vector<int> moveCellResearch (int player) = 0;
    virtual std::vector<int> adjacentEnnemyResearch (int player, int init_i, int init_j) = 0;
    std::vector<int> adjacentCellResearch (int init_i, int init_j);
    std::vector<int> placeCellResearch (int player);
    std::vector<int> skyCellResearch (int player);
    std::vector<int> playerCellResearch (int player);
    bool isAdjacent (int init_i, int init_j, int final_i, int final_j);
    std::vector<int> getAdjacences (int i, int j);
    engine::Engine* getMoteur () const;
    // Setters and Getters
    const std::vector<std::shared_ptr<engine::Command> >& getListCommands() const;
    void setListCommands(const std::vector<std::shared_ptr<engine::Command> >& listCommands);
  };

};

#endif
